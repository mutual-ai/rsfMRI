function fmri_regress_nuisance(func_files,brain_mask_file,nuisance_file)
%Function to regress out nuisance vectors from resting state fMRI data. It
%produces new files with 'n' prepended to the filenames.
%
%Usage
%   fmri_regress_nuisance(func_files,brain_mask_file,nuisance_file)
%Inputs
%   func_files      - a cell array of functional file names (typically
%                     normalized and unsmoothed files)
%   brain_mask_file - a binary brain mask file
%   nuisance_file   - a mat file of nuisances generated by fmri_extract_nuisance
%Output filenames are prepended with 'n' 

%Modified Jul 2011 to be used in the fmri_preproc_toolbox
%Modified nii Ying Cheng Aug 18, 2013 to get proper mean image added back
%Modified (v2) Ying Cheng, July 29, 2013

%% Read functional files
disp(['Regressing Nuisances: ',fileparts(func_files{1})]);
P=strvcat(func_files);%#ok

%% Read the brain mask
brain_mask = spm_read_vols(spm_vol(brain_mask_file));
brain_mask = reshape(brain_mask, (size(brain_mask, 1)*size(brain_mask, 2)*size(brain_mask,3)), 1);

%% Read nuisance vector
load(nuisance_file);
nt = size(nui.tc,1);
% Design matrix = [nuisances, constant, linear]
ntc = [nui.tc,ones(nt,1), (0:1/nt:(1-1/nt))'];
precal_inv = ntc*((ntc'*ntc)\ntc');

%% Regress nuisances and write out residuals
V = spm_vol(P);
W = single(reshape(spm_read_vols(V), V(1).dim(1)*V(1).dim(2)*V(1).dim(3), size(V,1)));
%Get mean image (along time) to add back the image
mY_time = reshape(mean(W,2), V(1).dim(1), V(1).dim(2), V(1).dim(3));
%regress and get residuals
W=transpose(W);
Y = W-precal_inv*W;
Y(:, logical(~brain_mask)) = 0;
Y = permute(reshape(Y, size(V,1), V(1).dim(1), V(1).dim(2), V(1).dim(3)), [2, 3, 4, 1]);
%Write residuals after adding mean image back
for i_time = 1:size(V,1),
    Vo= V(i_time);
    [pathname, filename, ext] = fileparts(V(i_time).fname);
    Vo.fname = fullfile(pathname,['n',filename,ext]);
    Vo.private.dat.fname = Vo.fname;
    Y(:,:,:,i_time) = Y(:,:,:,i_time) + mY_time;
    spm_write_vol(Vo, Y(:, :, :, i_time));
end;